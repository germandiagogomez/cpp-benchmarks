* Purpose

This is a set of benchmarks in C++ that tries
to compare "raw/C-ish code" implementations vs
"library-based, modern C++"
implementations of some algorithms and compares
their speeds.


For every benchmark,
two implementations are introduced:

- raw implementation.
- C++ modern implementation.

raw and C++. The goal is to put them front to front
to see how they perform against each other,
on a per-compiler basis.

Plots are generated, grouping, per-compiler,
the two versions put front to front.


I am particularly interested in measuring the abstraction
penalty incurred by the use of a C++ vs C-ish plain approaches
*when compiling programs with optimization*, since one
of the goals of C++ is to the zero-overhead principle.


My first experiment makes use of [[https://github.com/ericniebler/range-v3][Eric Niebler's ranges library]].
There is a standard C++ proposal for inclusion based on this work.

* Benchmarks

** Hardware information

I am using a =2,4 GHz Intel Core i5 4 GB 1600 MHz DDR3= with graphics
card =Intel Iris 1536 MB=. My OS is =OSX Yosemite 10.10.1=.


The versions of the compilers used for the benchmarks in my computer are:

   - g++-5 (Homebrew gcc5 5.2.0) 5.2.0.
   - Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)
     Target: x86_64-apple-darwin14.0.0
     Thread model: posix.

** Results

- Sequential sieve algorithm.
   - [[./benchmarks/01-sieve/raw_sieve.cpp][Raw sieve]].
   - [[./benchmarks/01-sieve/ranges_sieve.cpp][Ranges Sieve]].

#+CAPTION: Sieve benchmark result.
#+NAME: fig:sieve-bench
[[./benchmarks/01-sieve/plot-out/benchmark.png]]

* Compile and run the benchmarks

So you want to run the benchmark yourself in your computer...

You will need gnuplot installed in your computer for the plot output.


NOTE: Support for Visual C++ benchmark execution is planned to be supported,
though, I cannot give a date for this. As of now only Unix-like systems
are supported, since my solution uses handmade makefiles.


#+BEGIN_src sh
git clone https://github.com/germandiagogomez/the-cpp-abstraction-penalty.git
git submodule init
git submodule update
./configure
cd build
make COMPILERS="clang++ g++"
#+END_src

This will:

- Build the binaries for your compilers.
- Run the binaries for benchmarking
- Create a plots directory and put the benchmarks .png files there,
names benchmark-1.png for 1st benchmark, benchmark-2.png for 2nd benchmark,
etc.

The benchmarks shown the execution time comparison, on a per-compiler basis,
of

*WARNING*: Only tested on my Mac OSX computer.

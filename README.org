* Benchmarks

If you just want to see the benchmarks just go to the table here [[#BenchmarksResults][here]]

* Purpose

This is a set of benchmarks in C++ that tries
to compare "raw/C-ish code" or old C++ style
implementations vs "library-based, modern C++"
implementations of some algorithms and compares
their execution time.

For every benchmark, two implementations are introduced:

- raw implementation.
- modern C++ implementation.

The goal is to put them front to front
to see how they perform against each other,
on a per-compiler basis.

Plots are generated, grouping, per-compiler,
the two versions put front to front.


I am particularly interested in measuring the abstraction
penalty incurred by the use of a C++ vs C-ish plain approaches
*when compiling programs with optimization*, since one
of the goals of C++ is the zero-overhead principle.


My first experiment makes use of [[https://github.com/ericniebler/range-v3][Eric Niebler's ranges library]].
There is a standard C++ proposal for inclusion based on this work.

* Benchmark style and guidelines

The scope of this benchmark set is very targeted:
I want to show how typical, older-style or C-ish code
or old-style C++ code
performs against idiomatic modern C++ code.

I want to limit the benchmarks to code that is easy to
write for the average programmer, things that would be
likely to be written in the wild as a normal
attemp to perform an action, that look simple.

For example, if there is an I/O benchmark of C I/O vs C++ I/O,
I consider cheating to start to mess up with buffers and locales
and advanced tricks to improve performance, because
this is not what a normal programmer would write as a first attemp.

Contributions will be accepted.
Suggestions and ideas for new benchmarks are welcome as well.
I will reserve for myself the right to accept or reject a benchmark
to the set of benchmarks, with the hope of keeping it focused. :).

* Compile and run the benchmarks

So you want to run the benchmark yourself in your computer...

Prerequisites:

- Meson build system : https://mesonbuild.com/Getting-meson.html
- gnuplot if you want to be able to generate the plots for the benchmarks
- compilers to run the benchmarks against


#+BEGIN_src sh
git clone --recursive https://github.com/germandiagogomez/the-cpp-abstraction-penalty.git
cd the-cpp-abstraction-penalty

# Configure the superproject that will run the benchmarks suite
meson project-benchmarks-suite build-benchmarks-suite

# Run the benchmarks
ninja -C build-benchmarks-suite run_benchmarks_suite

# Generate the plots in directory build-all/plots (requires gnuplot)
ninja -C build-benchmarks-suite generate_plots

#+END_src

This will do the following:

 1. Build the binaries for your compilers.
 2. Run the binaries for the benchmark.
 3. Put, for each benchmark, a png file in
    build-all/plots directory that you can open when done to see the chart.

* How to contribute a new benchmark

TODO

** Getting your benchmark to work

* Benchmarks results

BenchmarksResults
|-----------------------------------------------------------------|
|Configuration name| Configuration details  | Benchmarks results  |
|-----------------------------------------------------------------| 
| blabla           |  aqui                  | aca                 |                                 
|-----------------------------------------------------------------|

